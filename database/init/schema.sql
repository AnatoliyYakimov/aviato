CREATE TABLE AIRPLANE_MODEL
(
    AIRPLANE_MODEL_ID   INTEGER GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
    AIRPLANE_MODEL_NAME VARCHAR(40) NOT NULL UNIQUE,
    MAX_SEATS_COUNT     INTEGER     NOT NULL CHECK ( MAX_SEATS_COUNT > 0 ),
    CONSTRAINT PK_AIRPLANE_MODEL
        PRIMARY KEY (AIRPLANE_MODEL_ID)
);

CREATE TABLE AIRPLANE
(
    AIRPLANE_ID             INTEGER GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
    AIRPLANE_SERIAL_NUMBER  VARCHAR(7) NOT NULL UNIQUE,
    AIRPLANE_MODEL_ID       INTEGER    NOT NULL,
    AIRPLANE_NAME           VARCHAR(50),
    ECONOMY_SEATS_COUNT     INTEGER NOT NULL CHECK ( ECONOMY_SEATS_COUNT >= 0 ),
    BUSINESS_SEATS_COUNT    INTEGER NOT NULL CHECK ( BUSINESS_SEATS_COUNT >= 0 ),
    FIRST_CLASS_SEATS_COUNT INTEGER NOT NULL CHECK ( FIRST_CLASS_SEATS_COUNT >= 0 ),
    CONSTRAINT PK_AIRPLANE
        PRIMARY KEY (AIRPLANE_ID),
    CONSTRAINT FK_AIRPLANE_AIRPLANE_MODEL
        FOREIGN KEY (AIRPLANE_MODEL_ID)
            REFERENCES AIRPLANE_MODEL (AIRPLANE_MODEL_ID)
);

CREATE FUNCTION SEATS_COUNT_CHECK() RETURNS trigger AS $emp_stamp$
BEGIN
    IF (NEW.ECONOMY_SEATS_COUNT + NEW.BUSINESS_SEATS_COUNT + NEW.FIRST_CLASS_SEATS_COUNT)
        > (SELECT MAX_SEATS_COUNT
            FROM AIRPLANE_MODEL
            WHERE AIRPLANE_MODEL.AIRPLANE_MODEL_ID = AIRPLANE.AIRPLANE_MODEL_ID)THEN
        RAISE EXCEPTION 'Summary seats count in airplane cannot exceed model seats limit';
    END IF;
    RETURN NEW;
END;
$emp_stamp$ LANGUAGE plpgsql;

CREATE TRIGGER SEATS_COUNT_CHECK_TRIGGER BEFORE INSERT OR UPDATE ON AIRPLANE
    FOR EACH ROW EXECUTE PROCEDURE SEATS_COUNT_CHECK();

CREATE TABLE PERSON
(
    PERSON_ID   INTEGER GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
    FIRST_NAME  VARCHAR(40) NOT NULL,
    MIDDLE_NAME VARCHAR(40),
    LAST_NAME   VARCHAR(40) NOT NULL,
    CONSTRAINT PK_PERSON
        PRIMARY KEY (PERSON_ID)
);

CREATE TABLE AIRPORT
(
    AIRPORT_ID   INTEGER GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
    AIRPORT_CODE VARCHAR(4)  NOT NULL,
    NAME         VARCHAR(30) NOT NULL,
    CONSTRAINT PK_AIRPORT
        PRIMARY KEY (AIRPORT_ID)
);


CREATE TABLE FLIGHT
(
    FLIGHT_ID                INTEGER GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
    AIRPLANE_ID              INTEGER   NOT NULL,
    DESTINATION_AIRPORT_ID   INTEGER   NOT NULL,
    DEPARTURE_AIRPORT_ID     INTEGER   NOT NULL,
    SCHEDULED_DEPARTURE_TIME TIMESTAMP NOT NULL,
    SCHEDULED_ARRIVAL_TIME   TIMESTAMP NOT NULL,
    ACTUAL_ARRIVAL_TIME      TIMESTAMP,
    ACTUAL_DEPARTURE_TIME    TIMESTAMP,
    SEAT_PRICE               DECIMAL   NOT NULL,

    CONSTRAINT PK_FLIGHT
        PRIMARY KEY (FLIGHT_ID),
    CONSTRAINT FK_FLIGHT_AIRPLANE
        FOREIGN KEY (AIRPLANE_ID)
            REFERENCES AIRPLANE (AIRPLANE_ID),
    CONSTRAINT FK_FLIGHT_DESTINATION_AIRPORT
        FOREIGN KEY (DESTINATION_AIRPORT_ID)
            REFERENCES AIRPORT (AIRPORT_ID),
    CONSTRAINT FK_FLIGHT_DEPARTURE_AIRPORT
        FOREIGN KEY (DEPARTURE_AIRPORT_ID)
            REFERENCES AIRPORT (AIRPORT_ID)
);

CREATE TABLE BOOKING
(
    BOOKING_ID  INTEGER GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
    PERSON_ID   INTEGER NOT NULL,
    FLIGHT_ID   INTEGER NOT NULL,
    SEAT_NUMBER INTEGER NOT NULL,

    CONSTRAINT PK_BOOKING
        PRIMARY KEY (BOOKING_ID),
    CONSTRAINT UNIQUE_BOOKING
        UNIQUE (PERSON_ID, FLIGHT_ID, SEAT_NUMBER),
    CONSTRAINT FK_BOOKING_PERSON
        FOREIGN KEY (PERSON_ID)
            REFERENCES PERSON (PERSON_ID),
    CONSTRAINT FK_BOOKING_FLIGHT
        FOREIGN KEY (FLIGHT_ID)
            REFERENCES FLIGHT (FLIGHT_ID)
);
